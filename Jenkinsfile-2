pipeline {
  agent { label 'terr-agent' }

    environment{
    MY_TOKEN = credentials('yc_token')
    MY_CLOUD_ID = credentials('yc_cloud_id')
    MY_FOLDER_ID = credentials('yc_folder_id')
    SUBNET_ID = credentials('subnet_id')
    SSH_PATH = credentials('ssh_public_key_path')
  }

  stages {
    stage('SSH key generate') {
      steps {
        sh '''
        rm -f jenkins jenkins.pub
        ssh-keygen -t rsa -b 4096 -C "jenkins@ci" -N "" -f jenkins 
        '''
      }
    }

    stage('Copy key'){
        steps {
          sh '''
          cp jenkins /home/jenkins/docker-data
          '''
        }
      }

    stage('Create tf.vars file') {
      steps {
        sh '''
          cd terraform &&\
          rm -f terraform.tfvars && touch terraform.tfvars && \
          printf 'yc_token = "%s"\n' "$MY_TOKEN" >> terraform.tfvars && \
          printf 'yc_cloud_id = "%s"\n' "$MY_CLOUD_ID" >> terraform.tfvars && \
          printf 'yc_folder_id = "%s"\n' "$MY_FOLDER_ID" >> terraform.tfvars && \
          printf 'subnet_id = "%s"\n' "$SUBNET_ID" >> terraform.tfvars && \
          printf 'ssh_public_key_path = "%s"\n' "$SSH_PATH" >> terraform.tfvars

        '''
      }
    }
    stage('Terraform and inventory init') {
      steps {
        script {
          catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
            sh '''
              cd terraform && \
              terraform init && \
              terraform plan && \
              terraform apply --auto-approve && \
              VM_IP=$(terraform output -raw vm_ip) && \
              cd ../ansible && \
              echo "[vm]" > ./inventory.ini && \
              echo "$VM_IP ansible_user=ubuntu ansible_ssh_private_key_file=~/workspace/test-job/jenkins" >> ./inventory.ini && \
              sleep 20
            '''
          }
        }
      }
    }

    stage('Copy inventory') {
      when {
        expression { currentBuild.rawBuild.getPreviousBuild()?.getResult()?.toString() != 'FAILURE' }
      }
      steps {
        sh 'cp ansible/inventory.ini /home/jenkins/docker-data'
      }
    }

    stage('Use existing inventory (fallback)') {
      when {
        expression { currentBuild.rawBuild.getPreviousBuild()?.getResult()?.toString() == 'FAILURE' }
      }
      steps {
        sh 'cp /home/jenkins/docker-data/inventory.ini ansible/inventory.ini'
      }
    }

    stage('Ansible run'){
      steps {
        sh '''
        cd ansible &&\
        ansible-playbook -i inventory.ini site.yml
        '''
      }
    }
  }

}